@page "/"

@using System.Threading
@using Components;
@using Components.Models;
@using ElectronNET.API
@using OurTextEditor.Component;

@inject ICurrentFileChangeBroadcastService CurrentFileService
@inject IOpenFilesChangeBroadcastService OpenFilesService
@inject IJSRuntime JsRuntime
@implements IDisposable

<body class="index">
    <div class="container">
        <FilesRibbon FilePaths="@_openFilePaths" CurrentFilePath="@CurrentFilePath" />
        <div id="text-box-refresh">
            <FileContent CurrentFilePath="@CurrentFilePath" />
        </div>
    </div>
</body>

<footer class="footer">
    <TextCounts CurrentFilePath="@CurrentFilePath"/>
</footer>

@code{
    // TODO: The title should be changed to the currently selected file.
    //probably change to component and get the real title by passing the argument in some way
    public string CurrentFilePath { get; set; }

    private List<string> _openFilePaths;

    protected override void OnInitialized()
    {
        // TODO: Remove this sleep.
        Thread.Sleep(5000);

        CursorInterop.JsRuntime = JsRuntime;

        CurrentFileService.OnCurrentFileChanged += CurrentFileChanged;
        OpenFilesService.OnOpenFilesChanged += OpenFilesChanged;

        CurrentFilePath = CurrentFileService.GetCurrentValue();
        _openFilePaths = ApplicationState.Instance.FileHandlerInstance.GetOpenFilePaths();
    }

    /// <summary>
    /// Updates the current file tab upon consuming a CurrentFileChange event.
    /// </summary>
    private async void CurrentFileChanged(object sender, CurrentFileChangeArgs args)
    {
        CurrentFilePath = args.FilePath;

        await InvokeAsync(() =>
            base.StateHasChanged());
    }

    /// <summary>
    /// Updates the open files ribbon upon consuming an OpenFilesChange event.
    /// </summary>
    private async void OpenFilesChanged(object sender, OpenFilesChangeArgs args)
    {
        _openFilePaths = args.OpenFiles;

        await InvokeAsync(() =>
            base.StateHasChanged());
    }

    public void Dispose()
    {
        CurrentFileService.OnCurrentFileChanged -= CurrentFileChanged;
        OpenFilesService.OnOpenFilesChanged -= OpenFilesChanged;
    }
}

